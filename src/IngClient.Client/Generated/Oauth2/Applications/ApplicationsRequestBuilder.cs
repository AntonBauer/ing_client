// <auto-generated/>
#pragma warning disable CS0618
using ApiSdk.Models;
using ApiSdk.Oauth2.Applications.Item;
using ApiSdk.Oauth2.Applications.Me;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace ApiSdk.Oauth2.Applications
{
    /// <summary>
    /// Builds and executes requests for operations under \oauth2\applications
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    internal partial class ApplicationsRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The me property</summary>
        public global::ApiSdk.Oauth2.Applications.Me.MeRequestBuilder Me
        {
            get => new global::ApiSdk.Oauth2.Applications.Me.MeRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Gets an item from the ApiSdk.oauth2.applications.item collection</summary>
        /// <param name="position">Application identifier - client_id received during onboarding.</param>
        /// <returns>A <see cref="global::ApiSdk.Oauth2.Applications.Item.ApplicationsItemRequestBuilder"/></returns>
        public global::ApiSdk.Oauth2.Applications.Item.ApplicationsItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("id", position);
                return new global::ApiSdk.Oauth2.Applications.Item.ApplicationsItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::ApiSdk.Oauth2.Applications.ApplicationsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public ApplicationsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/oauth2/applications", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::ApiSdk.Oauth2.Applications.ApplicationsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public ApplicationsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/oauth2/applications", rawUrl)
        {
        }
        /// <summary>
        /// This endpoint enables Third Party Providers (TPPs) onboarding by generating an application identifier (client_id) that will be further used in the authentication flow. The flow will automatically subscribe your application to the allowed ING APIs based on the PSD2 roles in the certificates. This endpoint should only be called once.
        /// </summary>
        /// <returns>A <see cref="global::ApiSdk.Models.ApplicationResponse"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::ApiSdk.Models.Error">When receiving a 400 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::ApiSdk.Models.ApplicationResponse?> PostAsync(global::ApiSdk.Models.ApplicationsRequest body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::ApiSdk.Models.ApplicationResponse> PostAsync(global::ApiSdk.Models.ApplicationsRequest body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::ApiSdk.Models.Error.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::ApiSdk.Models.ApplicationResponse>(requestInfo, global::ApiSdk.Models.ApplicationResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// This endpoint enables Third Party Providers (TPPs) onboarding by generating an application identifier (client_id) that will be further used in the authentication flow. The flow will automatically subscribe your application to the allowed ING APIs based on the PSD2 roles in the certificates. This endpoint should only be called once.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::ApiSdk.Models.ApplicationsRequest body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::ApiSdk.Models.ApplicationsRequest body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::ApiSdk.Oauth2.Applications.ApplicationsRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::ApiSdk.Oauth2.Applications.ApplicationsRequestBuilder WithUrl(string rawUrl)
        {
            return new global::ApiSdk.Oauth2.Applications.ApplicationsRequestBuilder(rawUrl, RequestAdapter);
        }
    }
}
#pragma warning restore CS0618
